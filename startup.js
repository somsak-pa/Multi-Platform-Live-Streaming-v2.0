// Startup script ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ RTMP Server ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡πà‡∏≠‡∏ô React App
import { spawn } from 'child_process';
import http from 'http';

console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Live Streaming...\n');

// Function ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ RTMP server ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
function checkRTMPServer() {
  return new Promise((resolve) => {
    const req = http.get('http://127.0.0.1:8000', (res) => {
      resolve(true);
    });
    
    req.on('error', () => {
      resolve(false);
    });
    
    req.setTimeout(1000, () => {
      req.destroy();
      resolve(false);
    });
  });
}

// Function ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡πÉ‡∏´‡πâ RTMP server ‡∏û‡∏£‡πâ‡∏≠‡∏°
async function waitForRTMPServer(maxWait = 30000) {
  const startTime = Date.now();
  
  while (Date.now() - startTime < maxWait) {
    const isReady = await checkRTMPServer();
    if (isReady) {
      return true;
    }
    console.log('‚è≥ ‡∏£‡∏≠ RTMP Server ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...');
    await new Promise(resolve => setTimeout(resolve, 2000));
  }
  
  return false;
}

async function startSystem() {
  console.log('1Ô∏è‚É£ ‡πÄ‡∏£‡∏¥‡πà‡∏° RTMP Server...');
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏° RTMP Server
  const rtmpProcess = spawn('node', ['server.js'], {
    cwd: 'my-rtmp-server',
    stdio: ['inherit', 'pipe', 'pipe']
  });
  
  rtmpProcess.stdout.on('data', (data) => {
    console.log(`[RTMP] ${data.toString().trim()}`);
  });
  
  rtmpProcess.stderr.on('data', (data) => {
    console.log(`[RTMP] ${data.toString().trim()}`);
  });
  
  // ‡∏£‡∏≠‡πÉ‡∏´‡πâ RTMP Server ‡∏û‡∏£‡πâ‡∏≠‡∏°
  console.log('\n‚è≥ ‡∏£‡∏≠ RTMP Server ‡∏û‡∏£‡πâ‡∏≠‡∏°...');
  const rtmpReady = await waitForRTMPServer();
  
  if (!rtmpReady) {
    console.log('‚ùå RTMP Server ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö');
    process.exit(1);
  }
  
  console.log('‚úÖ RTMP Server ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß!\n');
  console.log('2Ô∏è‚É£ ‡πÄ‡∏£‡∏¥‡πà‡∏° React App...');
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏° React App
  const reactProcess = spawn('npm', ['run', 'electron-dev'], {
    stdio: ['inherit', 'pipe', 'pipe'],
    shell: true
  });
  
  reactProcess.stdout.on('data', (data) => {
    console.log(`[ELECTRON] ${data.toString().trim()}`);
  });
  
  reactProcess.stderr.on('data', (data) => {
    console.log(`[ELECTRON] ${data.toString().trim()}`);
  });
  
  console.log('\nüéâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!');
  console.log('üìù ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:');
  console.log('   - RTMP Server: http://127.0.0.1:8000');
  console.log('   - Stream URL: rtmp://127.0.0.1:1935/live');
  console.log('   - Stream Key: my-stream-key');
  console.log('   - ‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö\n');
  
  // Graceful shutdown
  process.on('SIGINT', () => {
    console.log('\nüõë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö...');
    rtmpProcess.kill('SIGTERM');
    reactProcess.kill('SIGTERM');
    setTimeout(() => {
      process.exit(0);
    }, 2000);
  });
  
  // Handle process exits
  rtmpProcess.on('exit', (code) => {
    console.log(`[RTMP] Process exited with code ${code}`);
    if (code !== 0) {
      console.log('‚ùå RTMP Server ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
      reactProcess.kill('SIGTERM');
      process.exit(1);
    }
  });
  
  reactProcess.on('exit', (code) => {
    console.log(`[ELECTRON] Process exited with code ${code}`);
    if (code !== 0) {
      console.log('‚ùå React App ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
      rtmpProcess.kill('SIGTERM');
      process.exit(1);
    }
  });
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö
startSystem().catch((error) => {
  console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
  process.exit(1);
});