// /home/ubuntu/rtmp-backend/controllers/streamController.js
const axios = require('axios');
const config = require('../config');
const { google } = require('googleapis');
const { spawn } = require('child_process');

// สร้าง OAuth2 client instance สำหรับการใช้งานภายใน Controller
const oauth2ClientInternal = new google.auth.OAuth2(
    config.GOOGLE_CLIENT_ID,
    config.GOOGLE_CLIENT_SECRET,
    config.GOOGLE_REDIRECT_URI
);

// ตั้งค่า Refresh Token ให้กับ OAuth2 client
oauth2ClientInternal.setCredentials({
    refresh_token: config.YOUTUBE_REFRESH_TOKEN,
});

// สร้าง YouTube API client
const youtube = google.youtube({
    version: 'v3',
    auth: oauth2ClientInternal,
});

// Endpoint สำหรับการจัดการ Live Stream เมื่อ NGINX เรียก on_publish
exports.handlePublishStart = async (req, res) => {
    console.log('--- Received raw req.body ---', req.body);
    const obsStreamKey = req.body.name; // Stream Key คงที่จาก OBS

    console.log(`[Backend]: on_publish event received for OBS Stream Key: ${obsStreamKey}`);

    // ตรวจสอบ OBS Stream Key ว่าถูกต้องหรือไม่
    if (obsStreamKey === config.STREAM_KEY) { // ใช้ config.STREAM_KEY เพื่อยืนยัน
        console.log('Access GRANTED for OBS Stream Key.');
        res.status(200).send('OK'); // ตอบกลับ NGINX ทันที เพื่อให้ OBS สตรีมต่อไป

        try {
            // 1. ดึง Stream Key Dynamic จาก YouTube API
            const youtubeStreamInfo = await exports.getYouTubeStreamKeyInternal();
            const rtmpUrl = youtubeStreamInfo.rtmpUrl; // จะเป็นค่าที่เรา hardcode ไว้แล้ว
            const streamKey = youtubeStreamInfo.streamKey;
            const broadcastId = youtubeStreamInfo.broadcastId;
            const youtubeLiveUrl = youtubeStreamInfo.youtubeLiveUrl; // จะเป็นค่าที่ถูกต้องแล้ว

            // ตรวจสอบค่า RTMP URL และ Stream Key ที่ได้มา
            if (!rtmpUrl || !streamKey) {
                throw new Error("Failed to get valid RTMP URL or Stream Key from YouTube API.");
            }

            console.log(`[Backend]: Fetched Dynamic YouTube Stream Info: RTMP: ${rtmpUrl}, Key: ${streamKey}`);

            // 2. สั่งรัน ffmpeg เพื่อ Push Stream ไปยัง YouTube
            const ffmpegArgs = [
                '-i', `rtmp://127.0.0.1:1935/live/${obsStreamKey}`, // Input: ดึงจาก NGINX Local RTMP
                '-c:v', 'copy', // Copy video codec (ไม่ encode ซ้ำ)
                '-c:a', 'aac', // Encode audio to AAC (YouTube แนะนำ)
                '-b:a', '128k', // Audio bitrate
                '-ar', '44100', // Audio sample rate
                '-f', 'flv', // Output format: FLV
                `${rtmpUrl}/${streamKey}`, // Output: YouTube RTMP URL (hardcoded) + Key
            ];

            console.log(`[Backend]: FFMPEG Command: ffmpeg ${ffmpegArgs.join(' ')}`); // Log คำสั่ง ffmpeg ที่ใช้

            const ffmpegProcess = spawn('ffmpeg', ffmpegArgs);

            ffmpegProcess.stdout.on('data', (data) => {
                console.log(`[FFMPEG]: stdout: ${data}`);
            });

            ffmpegProcess.stderr.on('data', (data) => {
                // ffmpeg มักจะส่ง Log ไปที่ stderr
                console.error(`[FFMPEG]: stderr: ${data}`);
            });

            ffmpegProcess.on('close', (code) => {
                if (code !== 0) {
                    console.error(`[FFMPEG]: Process exited with code ${code}`);
                } else {
                    console.log(`[FFMPEG]: Process exited successfully.`);
                }
            });

            ffmpegProcess.on('error', (err) => {
                console.error(`[FFMPEG]: Failed to start process: ${err.message}`);
            });

            console.log(`[Backend]: FFMPEG process spawned for OBS Stream Key: ${obsStreamKey} to YouTube Broadcast: ${broadcastId}`);
            console.log(`[Backend]: View Live at: ${youtubeLiveUrl}`);

        } catch (error) {
            console.error('[Backend]: Error in handlePublishStart (Dynamic Push):', error.message);
            if (error.response && error.response.data) {
                console.error('[Backend]: Google API Error Response:', JSON.stringify(error.response.data, null, 2));
            }
        }

    } else {
        console.log(`[Backend]: OBS Stream Key: ${obsStreamKey} DENIED. Stream rejected.`);
        res.status(403).send('Forbidden'); // ปฏิเสธการเชื่อมต่อถ้า Stream Key ไม่ถูกต้อง
    }
};

// ฟังก์ชันสำหรับดึง Stream Key YouTube (Internal Function)
exports.getYouTubeStreamKeyInternal = async () => {
    try {
        // สร้าง Live Broadcast
        const broadcastResponse = await youtube.liveBroadcasts.insert({
            part: 'snippet,status',
            resource: {
                snippet: {
                    title: `Live Stream from iStream - ${new Date().toLocaleString()}`,
                    description: 'Dynamic live stream generated by Node.js backend.',
                    scheduledStartTime: new Date().toISOString(),
                },
                status: {
                    privacyStatus: 'unlisted', // 'public', 'unlisted', 'private'
                },
            },
        });
        const broadcastId = broadcastResponse.data.id;
        console.log(`[YouTube API]: Created Live Broadcast with ID: ${broadcastId}`);

        // สร้าง Live Stream
        const streamResponse = await youtube.liveStreams.insert({
            part: 'snippet,cdn',
            resource: {
                snippet: {
                    title: `RTMP Stream for Broadcast ${broadcastId}`,
                    description: 'RTMP stream details.',
                },
                cdn: {
                    frameRate: '60fps',
                    ingestionType: 'rtmp',
                    resolution: '1080p',
                },
            },
        });
        const streamId = streamResponse.data.id;
        const rtmpUrlFromApi = streamResponse.data.cdn.ingestionInfo.ingestionAddress; 
        const streamKey = streamResponse.data.cdn.ingestionInfo.streamName;

        // เพิ่มบรรทัดนี้เพื่อดูข้อมูลดิบจาก API และตรวจสอบเงื่อนไข
        console.log('[YouTube API]: Raw Ingestion Info (for debug):', JSON.stringify(streamResponse.data.cdn.ingestionInfo, null, 2));
        console.log(`[YouTube API]: rtmpUrlFromApi (from API) length: ${rtmpUrlFromApi.length}`);
        
        // ตรวจสอบอักขระในตำแหน่งต่างๆ ของ rtmpUrlFromApi
        let charCodes = '';
        for (let i = 0; i < rtmpUrlFromApi.length; i++) {
             charCodes += `${rtmpUrlFromApi[i]}:${rtmpUrlFromApi.charCodeAt(i)} `;
             if (i > 30) break; // จำกัดการแสดงผลเพื่อความอ่านง่าย
        }
        console.log(`[YouTube API]: rtmpUrlFromApi charCodes (first 30 chars, for debug): ${charCodes}`);

        // **** สำคัญมาก: กำหนด RTMP URL ที่ทราบว่าถูกต้องของ YouTube โดยตรง ****
        // เนื่องจากค่าที่ได้จาก API client มีปัญหาในการตีความ/นำไปใช้
        const rtmpUrl = 'rtmp://a.rtmp.youtube.com/live2'; 
        console.log(`[YouTube API]: Using Fixed YouTube Ingestion RTMP URL: ${rtmpUrl}`);


        // ผูก Live Broadcast กับ Live Stream
        await youtube.liveBroadcasts.bind({
            id: broadcastId,
            part: 'id,snippet,contentDetails,status',
            streamId: streamId,
        });
        console.log(`[YouTube API]: Bound Broadcast ${broadcastId} to Stream ${streamId}`);

        // **** สำคัญมาก: สร้าง URL สำหรับดู Live Stream ที่ใช้งานได้จริงบน YouTube ****
        const youtubeLiveUrl = `https://www.youtube.com/watch?v=${broadcastId}`; 
        console.log(`[YouTube API]: Generated YouTube Watch URL: ${youtubeLiveUrl}`);

        return { broadcastId, streamId, rtmpUrl, streamKey, youtubeLiveUrl };

    } catch (error) {
        console.error('[YouTube API]: Error creating YouTube Live Stream (Internal):', error.message);
        if (error.response && error.response.data) {
            console.error('[YouTube API]: Google API Error Response (Internal):', JSON.stringify(error.response.data, null, 2));
        }
        throw new Error('Failed to retrieve YouTube Stream Key internally: ' + error.message);
    }
};
